export: let DrawPile := []
export: let Hand := []
export: let DiscardPile := []
export: let Modifiers := []
export: let Counters := {}
export: let Goals := {}

export: var choose
export: var display

class: blocker(:type)

export: class: card(:details)

meth ::(Card: card, Detail: string) Card:details[Detail]

meth :name(Card: card) type(Card):name:title
meth :description(Card: card) 'A {type(Card):name}.'
meth :draw(Card: card) nil
meth :blocks(Card: card, Other: card) nil
meth :playable(Card: card) nil
meth :play(Card: card) nil
meth :discard(Card: card) nil
meth :remove(Card: card) nil

export: fun playable(Card) do
	for Modifier in Modifiers do
		if Modifier in blocker and Card in Modifier:type then
			ret nil
		end
	end
	for Other in Hand do
		if Other:blocks(Card) then
			ret nil
		end
	end
	ret Card:playable
end

export: fun played(Card) do
	
end

export: fun current(Name) Counters[Name]

export: fun increase(Name, Value) do
	:> TODO: Check for modifiers
	Counters[Name] := old + Value
end

export: fun decrease(Name, Value) do
	:> TODO: Check for modifiers
	Counters[Name] := old - Value
end

export: fun goal(Name, Tasks, Action) do
	Goals[Name] := (Tasks, Action)
end

export: fun progress(Name, Index) do
	let Goal := Goals[Name] or error("NameError", 'Unknown goal: {Name}')
	Goal[1]:delete(Index)
	if Goal[1]:size = 0 then
		Goals:delete(Name)
		Goal[2]()
	end
end

export: fun draw(Card := DrawPile[1]) do
	if not DrawPile:find(Card) then
		display('\e[32mAdded\e[0m \e[4m{Card:name}\e[0m to hand.\n')
	end
	if Card then
		DrawPile:filter(_ != Card)
		DiscardPile:filter(_ != Card)
		Hand:put(Card)
		Card:draw
	end
	ret Card
end

export: fun discard(Card) do
	:> TODO: Check for modifiers
	DrawPile:filter(_ != Card)
	if Hand:filter(_ != Card):length = 0 then
		display('\e[32mAdded\e[0m \e[4m{Card:name}\e[0m to discard pile.\n')
	end
	DiscardPile:put(Card)
	Card:discard
end

export: fun remove(Card) do
	:> TODO: Check for modifiers
	DrawPile:filter(_ != Card)
	Hand:filter(_ != Card)
	DiscardPile:filter(_ != Card)
	display('\e[31mRemoving\e[0m \e[4m{Card:name}\e[0m from hand.\n')
	Card:remove
end

export: fun start(DayFn, TurnFn) do
	for Day in 1:up do
		let DrawCount := DayFn(Day)
		for I in 1 .. DrawCount do
			while draw()
		end
		loop
			TurnFn(Day)
			if let Card := choose(Hand, ::Cost) then
				if playable(Card) then
					:>Stdout:write('Playing {Card}\n')
					Card:play
				else
					display('\e[33mBlocked\e[0m \e[4m{Card:name}\e[0m cannot be played at this time.\n')
				end
			else
				loop
					discard(while Hand[1])
				end
				if DrawPile:length = 0 then
					DrawPile:grow(DiscardPile)
					DrawPile:shuffle
					DiscardPile:empty
				end
				exit
			end
		on Error do
			display('Error: {Error}\n')
		end
	end
end
