def (Stdin, Stdout) in import("io/terminal")
def (
	DrawPile, Hand, DiscardPile, Modifiers, Counters, Goals, 
	playable, draw, discard, choose, display, event, start
) in import("game")
import: cards("cards")

random::seed(time():nsec)

Counters["influence"] := 0
Counters["value"] := 0
Counters["daily_energy"] := 3
Counters["draw_count"] := 4

DrawPile:put(
	cards::project({"Size" is 3, "Cost" is 1}),
	cards::developer({"Skill" is 1}),
	cards::training({"Cost" is 1}),
	cards::bigshot({"Cost" is 1}),
	cards::customer({"Cost" is 2, "Value" is 3}),
	cards::plan({
		"Cost" is 1,
		"Size" is 4,
		"Task" is {"Cost" is 3, "Skill" is 3},
		"Goal" is cards::workshop,
		"Details" is {
			"Cost" is 4,
			"Value" is 5
		}
	}),
	cards::plan({
		"Cost" is 1,
		"Size" is 2,
		"Task" is {"Cost" is 2, "Skill" is 2},
		"Goal" is cards::presentation,
		"Details" is {"Cost" is 1}
	}),
	cards::order({
		"Cost" is 1,
		"Size" is 3,
		"Order" is cards::coffee
	}),
	cards::retrospective({}),
	cards::practioner({"Influence" is 10}),
	cards::recruiter({"Cost" is 2}),
	cards::event({"Events" is [
		(0.1, cards::training, {"Cost" is 2}),
		(0.05, cards::practioner, {"Influence" is 10})
	]})
)
DrawPile:shuffle

choose := fun(Seq, CostFn := 0) do
	let Cards := list(Seq)
	Cards:length > 0 or ret nil
	Stdout:write('Choose a card:\n')
	for I, Card in Cards do
		Stdout:write('  {I, "% 2d"}: \e[4m{Card:name} \e[32m({CostFn(Card) or ""})\e[0m\n      {Card:description}\n')
	end
	Stdout:write('  {0, "% 2d"}: \e[31mCancel or Skip\e[0m\n')
	Stdout:write("\n")
	loop
		Stdout:write("Choice: ")
		let Index := integer(Stdin:read:trim)
		if Index = 0 then
			ret nil
		elseif let Card := Cards[Index] then
			:>Stdout:write('Choosing {Index} -> {Card}\n')
			ret Card
		end
	on Error do
		Stdout:write('Error: {Error}\n')
	end
end

display := Stdout:write(_)

let Events := []
event := Events:put(_)

start(
	fun(Day) do	
		Counters["energy"] := Counters["draw_count"]
	end,
	fun(Day) do
		Stdout:write('\e[2J\e[H\e[32mDay {Day}\e[0m Value: \e[32m{Counters["value"]}\e[0m    Influence: \e[32m{Counters["influence"]}\e[0m\n')
		for Event in Events do
			Stdout:write(Event, "\n")
		end
		Events:empty
		Stdout:write('[\e[33m{DrawPile:length}\e[0m] - \e[32m{sum(@"â˜•" limit Counters["energy"])}\e[0m - [\e[33m{DiscardPile:length}\e[0m]\n\n')
	end
)
