def (Stdin, Stdout) in import("io/terminal")
import: base16("enc/base16")
import: terminal("io/terminal")
def (
	DrawPile, Hand, DiscardPile, Modifiers, Counters, Goals, 
	playable, draw, discard, choose, display, log, start
) in import("game")
import: cards("cards")
def size := cards::size

random::seed(time():nsec)

Counters["influence"] := 0
Counters["value"] := 0
Counters["daily_energy"] := 4
Counters["draw_count"] := 5

DrawPile:put(
	cards::project({"Size" is 3, "Cost" is 1}),
	cards::developer({"Skill" is 1}),
	cards::training({"Cost" is 1}),
	cards::bigshot({"Cost" is 2}),
	cards::customer({"Cost" is 2, "Value" is 3}),
	cards::plan({
		"Cost" is 1,
		"Size" is 4,
		"Task" is {"Cost" is 3, "Skill" is 3},
		"Goal" is cards::workshop,
		"Details" is {
			"Cost" is 4,
			"Value" is 5
		}
	}),
	cards::plan({
		"Cost" is 1,
		"Size" is 2,
		"Task" is {"Cost" is 2, "Skill" is 2},
		"Goal" is cards::presentation,
		"Details" is {"Cost" is 1, "Value" is 1}
	}),
	cards::order({
		"Cost" is 1,
		"Size" is 3,
		"Order" is cards::coffee
	}),
	cards::retrospective({}),
	cards::practioner({"Influence" is 10}),
	cards::recruiter({"Cost" is 2}),
	cards::event({"Events" is [
		(0.1, cards::training, {"Cost" is 2}),
		(0.05, cards::practioner, {"Influence" is 10})
	]}),
	cards::review({"Value" is 3}),
	cards::scientist({"Skill" is 3})
)
DrawPile:shuffle

choose := fun(Message, Seq, CostFn := 0) do
	let Cards := list(Seq)
	:>Cards:length > 0 or ret nil
	Stdout:write(' {Message}:\n\n')
	:>Stdout:write( (\e[32m0\e[0m: Cancel or Skip):\n\n')
	Stdout:write('  \e[100m \e[32m0:\e[39m{11 * " "}\e[4mCancel or Skip\e[24m{11 * " "}\e[49m\n\n')
	let Rows := [1 .. 1]
	var Row := 3
	for I, Card in Cards do
		:<if I = 1 then
			Stdout:write(' ╔', 39 * '═', '╗\n')
		else
			Stdout:write(' ╠', 39 * '═', '╣\n')
		end>:
		let Cost := string(CostFn(Card) or "")
		let Number := '{I, 36}:'
		let Name := Card:name
		let LeftPadding := 37 - Name:length div 2
		let RightPadding := 37 - Name:length - LeftPadding
		:>Stdout:write(' ║ \e[32m{Number}\e[39m{LeftPadding - Number:length * " "}\e[4m{Name}\e[24m{RightPadding - Cost:length * " "}\e[31m{Cost}\e[39m ║\n')
		Stdout:write('  \e[100m \e[32m{Number}\e[39m{LeftPadding - Number:length * " "}\e[4m{Name}\e[24m{RightPadding - Cost:length * " "}\e[31m{Cost}\e[39m \e[49m\n')
		var Height := 1
		var Description := Card:description
		loop
			while Description:length > 36
			for I in 37 .. 1 by -1 do
				if Description[I] = " " then
					:>Stdout:write(' ║  {Description[1, I]}{37 - I * " "} ║\n')
					Stdout:write('  \e[100m  {Description[1, I]}{37 - I * " "} \e[49m\n')
					Height := old + 1
					Description := old[I + 1, 0]
					exit
				end
			else
				:>Stdout:write(' ║  {Description[1, 37]} ║\n')
				Stdout:write('  \e[100m  {Description[1, 37]} \e[49m\n')		
				Height := old + 1
				Description := old[37, 0]
			end
		end
		:>Stdout:write(' ║  {Description}{36 - Description:length * " "} ║\n')
		Stdout:write('  \e[100m  {Description}{36 - Description:length * " "} \e[49m\n')
		Height := old + 1
		Stdout:write("\n")
		Rows:put(Row .. (Row - 1 + Height))
		Row := old + Height + 1
	end
	Stdout:write("\e[6n")
	let (_, Y, X) := Stdin:readx("R") % r"\[([0-9]+);([0-9]+)"
	for Range in Rows do
		Range := old + (integer(Y) - Row)
	end
	:>Stdout:write('Y = {Y}, X = {X}, Rows = {Rows}\n')
	:>Stdout:write(' ╚', 39 * '═', '╝\n')
	:>Stdout:write("\n")
	Stdout:write(" Choice: ")
	loop
		let Input := Stdin:read(1)
		:>Stdout:write('<{Input:code}>\n')
		let Index := if Input = "\e" then
			let (_, Button, X, Y, Event) := Stdin:readi("Mm") % r"\[<([0-9]+);([0-9]+);([0-9]+)([Mm])"
			:>let Bytes := Stdin:read(5)
			Event = "m" or next
			:>Stdout:write('{Button} @ {X},{Y} -> {Event}\n')
			3 <= integer(X) <= 41 or next
			if let Match := first2(Rows ->? (integer(Y) in _)) then
				Match[1] - 1
			else
				next
			end
		else
			integer(Input, 36)
		on Error do
			next
		end
		Stdout:write(Index)
		:>let Index := integer(Input) :> :trim)
		if Index = 0 then
			ret nil
		elseif let Card := Cards[Index] then
			:>Stdout:write('Choosing {Index} -> {Card}\n')
			ret Card
		else
			Stdout:write('\e[D\e[K')
		end
	on Error do
		Stdout:write('\e[31m{Error}\e[0m\n')
	end
end

display := Stdout:write(_)

let Events := []
log := Events:put(_)

Stdin:set(terminal::lflag::ICANON, false)
Stdin:set(terminal::lflag::ECHO, false)
Stdout:write("\e[?1046h\e[?1049h\e[?1000h\e[?1006h")

start(
	fun(Day) do	
		Counters["energy"] := Counters["daily_energy"]
	end,
	fun(Day) do
		let Title := 'Day {Day}'
		let LeftPadding := 40 - Title:length div 2
		let RightPadding := 40 - Title:length - LeftPadding
		Stdout:write('\e[2J\e[H')
		let Energy := (Counters["energy"] * "⬮") + (Counters["daily_energy"] - Counters["energy"] * "⬯")
		let Cards := '[{DrawPile:length}/{DiscardPile:length}]'
		Stdout:write('\e[100m \e[33m{Cards}\e[39m{LeftPadding - Cards:length * " "}Day {Day}{RightPadding - Energy:length * " "}\e[31m{Energy}\e[39m \e[0m\n')
		:>🪙😎🗫🗩🗣💰
		Stdout:write(' Value: \e[32m{Counters["value"]}\e[0m, Influence: \e[32m{Counters["influence"]}\e[0m, Goals: \e[32m{Goals:size}\e[0m\n')
		let IndexWidth := string(max(key(Goals))):length
		let IndexFormat := '%{IndexWidth}d'
		for Index, (Tasks, Goal) in Goals do
			let Cost := Tasks:size * "✔"
			let Name := Goal:name
			let LeftPadding := 36 - IndexWidth - Name:length div 2
			let RightPadding := 36 - IndexWidth - Name:length - LeftPadding
			Stdout:write('  \e[100m \e[32m{Index, IndexFormat}:\e[39m{LeftPadding * " "}\e[4m{Name}\e[24m{RightPadding - Cost:length * " "}\e[33m{Cost}\e[39m \e[49m\n')
		end
		if Events:length > 0 then
			Stdout:write(' \n')
			each Events -> Stdout:write(" • ", _, "\n")
			Events:empty
		end
		Stdout:write(' \n')
	end
)
