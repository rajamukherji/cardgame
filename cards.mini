def (
	DrawPile, Hand, DiscardPile, Modifiers, Counters, Goals,
	card, current, increase, decrease, goal, progress, draw, discard, remove, choose, log
) in import("game")

var LastGoal := 0

enum: size("Tiny", "Small", "Medium", "Large", "Huge")

export: class: work(card)
meth :blocked(Card: work) Card::Cost > current("energy") and "insufficient energy"

export: class: task(work)
meth :name(Card: task) '{Card:type:title} Task ➙ {Card::Goal}'
meth :description(Card: task) 'A {Card:type} task requiring {Card::Skill} skill.'
meth :play(Card: task) do
	decrease("energy", Card::Cost)
	remove(Card)
end
meth :remove(Card: task) do
	progress(Card::Goal, Card::Index)
end
meth :type(Card: task) 'general'

export: class: coding(task)
meth :type(Card: coding) 'coding'

export: class: modelling(task)
meth :type(Card: modelling) 'modelling'

export: class: admin(task)
meth :type(Card: admin) 'admin'

export: class: person(card)
meth :blocked(Card: person) nil

export: class: developer(person)
meth :name(Card: developer) 'Developer-{Card::Skill}'
meth :description(Card: developer) 'A developer with {Card::Skill} skill.'
meth :play(Card: developer) do
	let Skill := Card::Skill + if current("energy") >= 2 then 1 else 0 end
	let Tasks := list(Hand ->? fun(Card) Card in coding and Card::Skill <= Skill)
	let Meet := card({"Name" is "Meet 1:1", "Description" is "Increase skill by 1."})
	if current("energy") >= 1 then Tasks:put(Meet) end
	let Task := choose("Select task to complete", Tasks; Task) do
		if Task = Meet then
			"■"
		elseif Task::Skill > Card::Skill then
			"■■"
		end
	end
	if Task = Meet then
		decrease("energy", 1)
		Card::Skill := old + 1
	elseif Task then
		if Task::Skill > Card::Skill then
			decrease("energy", 2)
			Card::Skill := old + 1
		end
		remove(Task)
	end
	discard(Card)
end

export: class: solution(card)
meth :name(Card: solution) 'Solution-{Card::Value}'
meth :description(Card: solution) 'A solution generating {Card::Value} value.'
meth :blocked(Card: solution) nil
meth :play(Card: solution) do
	increase("value", Card::Value)
	discard(Card)
end

export: class: project(work)
meth :name(Card: project) '{size(Card::Size)} Project'
meth :description(Card: project) '{size(Card::Size)} project.'
meth :play(Card: project) do
	decrease("energy", Card::Cost)
	let Project := LastGoal:inc
	let Tasks := list(1 .. Card::Size; I) do
		let Type := if random(real) < 0.2 then modelling else coding end
		discard(Type({"Cost" is 1, "Skill" is 3, "Goal" is Project, "Index" is I}))
	end
	goal(Project, set(1 .. Card::Size), solution({"Value" is Card::Size}))
	remove(Card)
end

export: class: meeting(work)
meth :name(Card: meeting) 'Meeting'
meth :description(Card: meeting) 'Recurring meeting requiring {Card::Cost} energy.'
meth :play(Card: meeting) do
	decrease("energy", Card::Cost)
	discard(Card)
end

export: class: training(work)
meth :name(Card: training) 'Training'
meth :description(Card: training) 'Training requiring {Card::Cost} energy.'
meth :play(Card: training) do
	decrease("energy", Card::Cost)
	remove(Card)
end
meth :blocks(Card: training, Other: card) Other in task

export: class: audience(card)
meth :demo(Card: audience) nil

export: class: demo(card)
meth :name(Card: demo) 'Demo-{Card::Value}'
meth :description(Card: demo) 'A demo generating {Card::Value} influence / projects.'
meth :blocked(Card: demo) if some(Hand, _ in audience) then nil else "lack of audience" end
meth :play(Card: demo) do
	let Audience := choose("Select audience for demo", Hand & (DrawPile limit 3) ->? fun(Card) Card in audience)
	Audience:demo(Card)
end

export: class: bigshot(audience)
meth :name(Card: bigshot) 'Bigshot'
meth :description(Card: bigshot) 'Visiting bigshot requires meeting costing {Card::Cost} energy or demo.'
meth :blocked(Card: bigshot) Card::Cost > current("energy") and "insufficient energy"
meth :play(Card: bigshot) do
	decrease("energy", Card::Cost)
	increase("influence", 1)
	discard(Card)
end
meth :blocks(Card: bigshot, Other: card) Other in work
meth :demo(Card: bigshot, Demo: demo) do
	increase("influence", Demo::Value)
	remove(Demo)
	discard(Card)
end

export: class: customer(work, audience)
meth :name(Card: customer) 'Customer-{Card::Value}'
meth :description(Card: customer) 'Customer that can generate ideas of value {Card::Value}.'
meth :play(Card: customer) do
	let Options := [
		idea({"Cost" is 1, "Size" is Card::Value}),
		data({"Cost" is Card::Value, "Size" is Card::Value})
	]
	let Cost := Card::Cost * "■"
	if let Option := choose("Select meeting result", Options, fun Cost) then
		decrease("energy", Card::Cost)
		discard(Option)
		discard(Card)
	end
end
meth :demo(Card: customer, Demo: demo) do
	discard(project({"Cost" is 1, "Size" is Demo::Value}))
	remove(Demo)
	discard(Card)
end

export: class: data(work)
meth :name(Card: data) 'Data-{Card::Size}'
meth :description(Card: data) 'Data of size {Card::Size}.'
meth :play(Card: data) do
	decrease("energy", Card::Cost)
	let Project := LastGoal:inc
	let Tasks := list(1 .. Card::Size; I) do
		discard(modelling({"Cost" is 1, "Skill" is 3, "Goal" is Project, "Index" is I}))
	end
	goal(Project, set(1 .. Card::Size), model({"Value" is Card::Size}))
	remove(Card)
end

export: class: model(card)
meth :name(Card: model) 'Model-{Card::Value}'
meth :description(Card: model) 'Model of value {Card::Value}.'
meth :blocked(Card: model) nil
meth :play(Card: model) do
	if let Other := choose("Select target to improve", DrawPile & Hand & DiscardPile ->? (_ in (solution | demo))) then
		Other::Value := old + Card::Value
		remove(Card)
	end
end

export: class: scientist(person)
meth :name(Card: scientist) 'Data Scientist-{Card::Skill}'
meth :description(Card: scientist) 'A data scientist with {Card::Skill} skill.'
meth :play(Card: scientist) do
	let Skill := Card::Skill + if current("energy") >= 2 then 1 else 0 end
	let Tasks := list(Hand ->? fun(Card) Card in modelling and Card::Skill <= Skill):grow(Hand ->? fun(Card) Card in customer)
	let Meet := card({"Name" is "Meet 1:1", "Description" is "Increase skill by 1."})
	if current("energy") >= 1 then Tasks:put(Meet) end
	let Task := choose("Select task to complete", Tasks; Task) do
		if Task = Meet then
			"■"
		elseif Task in modelling and Task::Skill > Card::Skill then
			"■■"
		elseif Task in customer then
			""
		end
	end
	if Task = Meet then
		decrease("energy", 1)
		Card::Skill := old + 1
	elseif Task in modelling then
		if Task::Skill > Card::Skill then
			decrease("energy", 2)
			Card::Skill := old + 1
		end
		remove(Task)
	elseif Task in customer  then
		discard(data({"Cost" is Task::Value + 1, "Size" is Task::Value + 1}))
		discard(Task)
	end
	discard(Card)
end

export: class: idea(work)
meth :name(Card: idea) 'Idea-{Card::Size}'
meth :description(Card: idea) 'An idea for a demo that will generate {Card::Size} influence / projects.'
meth :play(Card: idea) do
	decrease("energy", Card::Cost)
	let Demo := LastGoal:inc
	let Tasks := list(1 .. Card::Size; I) do
		discard(coding({"Cost" is 1, "Skill" is 3, "Goal" is Demo, "Index" is I}))
	end
	goal(Demo, set(1 .. Card::Size), demo({"Value" is Card::Size}))
	remove(Card)
end

export: class: recruiter(card)
meth :name(Card: recruiter) 'Recruiter'
meth :description(Card: recruiter) 'A recruiter costing {Card::Influence} influence to hire a team member.'
meth :blocked(Card: recruiter) Card::Influence > current("influence") and "insufficient influence"
meth :play(Card: recruiter) do
	let Options := [
		developer({"Skill" is 1}),
		scientist({"Skill" is 1})
	]
	if let Option := choose("Select new team member", Options, fun Card::Influence) then
		decrease("influence", Card::Influence)
		discard(Option)
		discard(Card)
	end
end

export: class: workshop(card)
meth :name(Card: workshop) 'Workshop-{Card::Value}'
meth :description(Card: workshop) 'A workshop costing {Card::Cost} energy.'
meth :blocked(Card: workshop) Card::Cost > current("energy") and "insufficient energy"
meth :play(Card: workshop) do
	decrease("energy", Card::Cost)
	for Card in DrawPile & Hand & DiscardPile ->? (_ in developer) do
		Card::Skill := old + 1 min 5
	end
	increase("influence", Card::Value)
	if some(Hand, _ in bigshot) then
		increase("influence", 1)
	end
	remove(Card)
end

export: class: presentation(work)
meth :name(Card: presentation) 'Presentation'
meth :description(Card: presentation) 'A presentation costing {Card::Cost} energy. Generates {Card::Value} influence and Increases the skill of every developer in your hand.'
meth :blocked(Card: presentation) Card::Cost > current("energy") and "insufficient energy"
meth :play(Card: presentation) do
	decrease("energy", Card::Cost)
	increase("influence", Card::Value)
	for Card in Hand ->? (_ in developer) do
		Card::Skill := old + 1 min 5
	end
	remove(Card)
end

export: class: plan(work)
meth :name(Card: plan) 'Plan {Card::Goal:name}'
meth :description(Card: plan) 'Plan a {Card::Goal:name}.'
meth :play(Card: plan) do
	decrease("energy", Card::Cost)
	let Goal := LastGoal:inc
	for I in 1 .. Card::Size do
		discard(coding(Card::Task + {"Goal" is Goal, "Index" is I}))
	end
	goal(Goal, set(1 .. Card::Size), Card::Goal(Card::Details))
	discard(Card)
end

export: class: coffee(card)
meth :name(Card: coffee) 'Coffee'
meth :description(Card: coffee) 'Increase energy and draw a card.'
meth :blocked(Card: coffee) nil
meth :play(Card: coffee) do
	increase("energy", 1)
	remove(Card)
	draw()
end

export: class: order(card)
meth :name(Card: order) 'Order {Card::Size} {Card::Order:name}'
meth :description(Card: order) 'Orders {Card::Size} {Card::Order:name}.'
meth :blocked(Card: order) Card::Cost > current("energy") and "insufficient energy"
meth :play(Card: order) do
	decrease("energy", Card::Cost)
	for I in 1 .. Card::Size do
		discard(Card::Order(Card::Details or {}))
	end
	discard(Card)
end

export: class: annoyance(work)

export: class: overhead(annoyance, work)
meth :name(Card: overhead) '{if Card::Mandatory = true then "Mandatory " else "" end}Overhead'
meth :description(Card: overhead) 'Overhead requiring {Card::Cost} energy. Draw a card when played.'
meth :play(Card: overhead) do
	decrease("energy", Card::Cost)
	discard(Card)
	draw()
end
meth :blocks(Card: overhead, Other: card) Card::Mandatory = true and Other in work and not Other in overhead

export: class: practioner(annoyance)
meth :name(Card: practioner) 'Agile practitioner'
meth :description(Card: practioner) 'Agile practioner generates overhead when discarded.'
meth :discard(Card: practioner) do
	discard(overhead({"Cost" is 1, "Influence" is 1, "Mandatory" is random(boolean)}))
end

export: class: retrospective(card)
meth :name(Card: retrospective) 'Retrospective'
meth :description(Card: retrospective) 'Team retrospective. Uses influence to remove overhead and practioners.'
meth :blocked(Card: retrospective) nil
meth :play(Card: retrospective) do
	decrease("energy", Card::Cost)
	let Deck := DrawPile & Hand & DiscardPile
	loop
		let Annoyance := while choose("Select annoyance to remove", Deck ->? fun(Card) Card in annoyance and Card::Influence <= current("influence"), ::Influence)
		decrease("influence", Annoyance::Influence)
		remove(Annoyance)
	end
	discard(Card)
end

export: class: review(card)
meth :name(Card: review) 'Review'
meth :description(Card: review) 'End of year review, converts upto {Card::Value} value to influence.'
meth :blocked(Card: review) nil
meth :play(Card: review) do
	let Value := Card::Value min current("value")
	decrease("value", Value)
	increase("influence", Value)
	discard(Card)
end

export: class: event(card)
meth :name(Card: event) 'Event'
meth :description(Card: event) 'Event.'
meth :draw(Card: event) do
	log('\e[33mPlayed\e[0m \e[4m{Card:name}\e[0m from hand.')
	discard(Card)
	for (Prob, Type, Details) in Card::Events do
		if random(real) < Prob then
			draw(Type(Details))
		end
	end
end

export: class: choice(:name, :description, :cost)

export: class: poacher(card)
meth :name(Card: poacher) 'Poacher'
meth :description(Card: poacher) 'Poacher.'
meth :draw(Card: poacher) do
	log('\e[33mPlayed\e[0m \e[4m{Card:name}\e[0m from hand.')
	let Candidates := list((Hand & DrawPile) ->? fun(Card) Card in developer or Card in scientist)
	if Candidates:length = 0 then
		discard(Card)
	else
		let Candidate := random(Candidates)
		if Candidate::Skill div 2 > current("influence") then
			remove(Card)
			remove(Candidate)
		else
			let Choices := [
				choice("Do Nothing", "Do nothing", ""),
				choice("Use Influence", 'Use {Candidate::Skill} influence to retain.', '{Candidate::Skill div 2}')
			]
			let Choice := choose('A poacher is trying to recruiter {Candidate:name}', Choices, :cost)
			if Choice = last(Choices) then
				log('\e[33mCandidate\e[0m \e[4m{Candidate:name}\e[0m stayed.')
				decrease("influence", Candidate::Skill div 2)
				discard(Card)
			else
				log('\e[33mCandidate\e[0m \e[4m{Candidate:name}\e[0m left.')
				remove(Card)
				remove(Candidate)
			end
		end
	end
end
